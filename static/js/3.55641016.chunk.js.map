{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsConteiner.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","number","message","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","map","p","key","id","likesCount","createRef","postsBlock","values","addPost","newPostText","MyPostsConteiner","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormRedaxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.55641016.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2XWAw\",\"mainPhoto\":\"ProfileInfo_mainPhoto__XSPrZ\",\"contact\":\"ProfileInfo_contact__1YIOm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2RoUv\",\"posts\":\"MyPosts_posts__3jyYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2d_RT\"};","import React from 'react';\r\nimport s from \"./Post.module.css\"\r\n\r\nconst Post = (props) => {\r\n    return (\r\n          <div className = {s.item}>\r\n            <img src = 'https://cdn130.picsart.com/241364632051212.png?type=webp&to=min&r=1024'/>\r\n            <span>{props.number}</span>\r\n            <div>\r\n              <span>{props.message}</span>\r\n            </div>\r\n          </div>\r\n)}\r\n\r\nexport default Post;","import React  from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return <form onSubmit = {props.handleSubmit}>\r\n        <div>\r\n          <Field name = \"newPostText\" component = {Textarea} placeholder = {\"Post message\"}\r\n                  validate = {[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n  </form>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"}) (AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return nextProps != this.props || nextState != this.state;\r\n  // }\r\n\r\n    let postsElements = \r\n      props.posts.map(p => <Post key = {p.id} message = {p.message} likesCount = {p.likesCount}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n      props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n      <div className = {s.postsBlock}>\r\n        <h3>My posts</h3>\r\n          <AddNewPostFormRedux onSubmit = {onAddPost} />\r\n        <div className = {s.posts}>\r\n        {postsElements}\r\n        </div>\r\n      </div>\r\n    )\r\n  \r\n})\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch (addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst MyPostsConteiner = connect(mapStateToProps,mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsConteiner;","import React, { useState, useEffect } from 'react';\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    \r\n    const deactivateEditMode = () => {\r\n      setEditMode(false);\r\n      props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick ={activateEditMode}> {props.status || '---'} </span>\r\n                </div>\r\n            }\r\n            {editMode && \r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    ) \r\n    \r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit = {handleSubmit}>\r\n    <div><button>save</button></div>\r\n    {error && <div className = {style.formSummaryError}>\r\n        {error}\r\n    </div>\r\n    }\r\n    <div>\r\n        <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n    </div>\r\n    <div>\r\n        <b>Looking for a job</b>: { createField(\"\", \"lookingForAJob\", [] , Input, {type: \"checkbox\"} )}\r\n    </div>\r\n    <div>\r\n        <b>My professional skills</b>: \r\n        { createField(\"My professional skills\", \"lookingForAJobDescription\", [] , Textarea )}\r\n    </div>\r\n    <div>\r\n        <b>About me</b>:\r\n        { createField(\"About me\", \"aboutMe\", [] , Textarea )}\r\n    </div>\r\n    <div>\r\n        <b>Contacts</b>: {Object.keys(profile.contacts).map(key =>{\r\n            return <div key = {key} className = {s.contact}>\r\n                <b>{key} : { createField(key, \"contacts.\" + key, [], Input) }</b>\r\n            </div>\r\n        })}\r\n    </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormRedaxForm = reduxForm({form: 'edit-profile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormRedaxForm;","import React, { useState } from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n      return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n      if (e.target.files.length) {\r\n        savePhoto(e.target.files[0]);\r\n      }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n      saveProfile(formData).then( \r\n        () => {\r\n            setEditMode(false);\r\n        }\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className = {s.descriptionBlock}>\r\n          <img src = {profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n          {isOwner && <input type = {\"file\"} onChange = {onMainPhotoSelected}/>}\r\n\r\n          { editMode \r\n            ? <ProfileDataForm initialValues = {profile} profile = {profile} onSubmit = {onSubmit} /> \r\n            : <ProfileData goToEditMode = {() => {setEditMode(true)}} profile = {profile} isOwner = {isOwner} /> }\r\n\r\n          <ProfileStatusWithHooks status = {status} updateStatus = {updateStatus} />\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n      {isOwner && <div><button onClick = {goToEditMode}>edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n    <div>\r\n      <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n    </div>\r\n    }\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key = {key} contactTitle= {key} contactValue = {profile.contacts[key]} />\r\n      })} \r\n    </div>\r\n  </div>\r\n}\r\n\r\nconst Contact = ({contactTitle,contactValue}) => {\r\n  return <div className = {s.contact}> <b>{contactTitle}</b> : {contactValue} </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPostsConteiner from './MyPosts/MyPostsConteiner'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n          <ProfileInfo  savePhoto = {props.savePhoto} \r\n                        isOwner = {props.isOwner} \r\n                        profile = {props.profile} \r\n                        status = {props.status} \r\n                        saveProfile = {props.saveProfile}\r\n                        updateStatus = {props.updateStatus}/>\r\n          <MyPostsConteiner />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass  ProfileContainer extends React.Component {\r\n\r\n  refreshProfile() {\r\n      let userId = this.props.match.params.userId;\r\n      if (!userId) {\r\n        userId = this.props.authorizedUserId;\r\n        if (!userId) {\r\n          this.props.history.push(\"/login\");\r\n        }\r\n      }\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId){\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    // if (!this.isAuth) return <Redirect to = {\"/login\"} />\r\n    return (\r\n          <Profile {...this.props} \r\n                    isOwner = {!this.props.match.params.userId}\r\n                    profile = {this.props.profile} \r\n                    status = {this.props.status} \r\n                    updateStatus = {this.props.updateStatus}\r\n                    savePhoto = {this.props.savePhoto} \r\n                    />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n  });\r\n} \r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {getUserProfile, getStatus,updateStatus,savePhoto, saveProfile}),\r\n  withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}